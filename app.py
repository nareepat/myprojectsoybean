# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y0jhr3ijsPxbDgAqpD0nX5fdEFGZ1iR8
"""

#!pip install jupyter-dash  #comment this for

#pip install dash

#from google.colab import drive
#drive.mount('/content/drive')

import pickle
from pyexpat import model
import pandas as pd 
import numpy as np
from numpy import sqrt 
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import accuracy_score
from sklearn import metrics
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_percentage_error

import plotly
import dash
#from jupyter_dash import JupyterDash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import plotly.express as px
import plotly.graph_objs as go
from plotly.subplots import make_subplots

import pickle
import joblib

app = dash.Dash(__name__)
#app = JupyterDash(__name__)
server = app.server

#! Load DataFrame
data = pd.read_csv('Cleaned.csv', sep = '|', parse_dates=['Dates'])
# data = pd.read_csv('Cleaned.csv', sep = '|', parse_dates=['Dates'])
data.set_index('Dates',inplace=True)
data.head()
df = data.copy()

#! Function Evaluated_model
def Evaluated_model(model,df):
    df.dropna(axis=0,inplace=True)

    # train test split
    n_train = int(df.shape[0]*0.7)
    n_val = int(df.shape[0]*0.1)
    n_test = int(df.shape[0]*0.2)
    X_train = df.iloc[:n_train,1:]
    cols = X_train.columns
    y_train = df.iloc[:n_train,0]
    X_val = df.iloc[n_train:n_train+n_val,1:]
    y_val = df.iloc[n_train:n_train+n_val,0]
    X_test = df.iloc[n_train+n_val:,1:]
    y_test = df.iloc[n_train+n_val:,0]

    # compare test&predict
    y_predict = model.predict(X_val)
    y_predict_train = model.predict(X_train)
    y_predict_test = model.predict(X_test)
    validate = pd.DataFrame(y_val)
    validate['predict'] = y_predict
    validate

    # evaluate by validation set
    score_val = model.score(X_val,y_val)
    score_train = model.score(X_train,y_train)

    y_predict = model.predict(X_val)
    mae_train = metrics.mean_absolute_error(y_train,y_predict_train)
    mae_val = metrics.mean_absolute_error(y_val,y_predict)

    mse_train = metrics.mean_squared_error(y_train,y_predict_train)
    mse_val = metrics.mean_squared_error(y_val,y_predict)

    rmse_train = np.sqrt(metrics.mean_squared_error(y_train,y_predict_train))
    rmse_val = np.sqrt(metrics.mean_squared_error(y_val,y_predict))
    
    eval_train_val = pd.DataFrame(index = ["evaluated score"], 
                                    columns=['accuracy train','accuracy val','MAE_train','MAE_val',
                                            'MSE_train','MSE_val','RMSE_train','RMSE_val']
                                    )
    eval_train_val.iloc[0,:] = [score_train,score_val,mae_train,mae_val,mse_train,mse_val,rmse_train,rmse_val]

    # test set
    test = pd.DataFrame(y_test)
    test['predict_test'] = y_predict_test
    score_test = model.score(X_test,y_test)
    mae_test = metrics.mean_absolute_error(y_test,y_predict_test)
    mse_test = metrics.mean_squared_error(y_test,y_predict_test)
    rmse_test = np.sqrt(metrics.mean_squared_error(y_test,y_predict_test))
    eval_test = pd.DataFrame(index = ["scoring train_validate"], columns=['accuracy test','MAE_test','MSE_test','RMSE_test'])
    eval_test.iloc[0,:] = [score_test,mae_test,mse_test,rmse_test]

    return validate, test, eval_train_val, eval_test

def Evaluated_model_DL(model,df):
  # train test split
  n_train = int(df.shape[0]*0.7)
  n_val = int(df.shape[0]*0.1)
  n_test = int(df.shape[0]*0.2)
  X_train = df.iloc[:n_train,1:]
  cols = X_train.columns
  y_train = df.iloc[:n_train,0]
  X_val = df.iloc[n_train:n_train+n_val,1:]
  y_val = df.iloc[n_train:n_train+n_val,0]
  X_test = df.iloc[n_train+n_val:,1:]
  y_test = df.iloc[n_train+n_val:,0]

  scaler = StandardScaler()
  X_test = scaler.fit_transform(X_test)
  X_val = scaler.fit_transform(X_val)

  # Predict Test set
  predict_close_test = []
  predict_close_test = list(model.predict(X_test))
  predicted_close_test = []
  for i in range(len(y_test)):
      predicted_close_test.append((predict_close_test[i][0]))
  actual_close_test = []
  for i in range(len(y_test.reset_index(drop = True))-1):
      actual_close_test.append((y_test.reset_index(drop = True))[i])

  test_ = pd.DataFrame([list(actual_close_test),list(predicted_close_test)])
  test_ = test_.T
  test_.columns = ['Actual','Predict']
  test_.index = y_test.index

  mse_test_ = np.sqrt(metrics.mean_squared_error(test_.iloc[:-1,0],test_.iloc[:-1,1]))
  mse_test_ = np.round(mse_test_, 2)

  r2 = r2_score(test_.iloc[:-1,0],test_.iloc[:-1,1])*100
  score_test_ = np.round(r2, 2)
  
  return test_, mse_test_, score_test_

def LSTM(model,df):
  n_train = int(df.shape[0]*0.7)
  n_val = int(df.shape[0]*0.1)
  n_test = int(df.shape[0]*0.2)

  date_index = df.iloc[n_train+n_val+1:,1:].index

  X = df.iloc[:,1:].values
  y = df.iloc[:,0].values
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,shuffle=False)

  mu = X_train.mean(axis = 0)
  sd = X_train.std(axis=0)
  scaler = StandardScaler()
  X_train = scaler.fit_transform(X_train)
  X_test = (X_test - mu)/sd
  X_train = X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)
  X_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)

  predict_close = []
  predict_close = list(model.predict(X_test))
  predicted_close = []
  for i in range(len(y_test)):
      predicted_close.append((predict_close[i][0]))
  actual_close = []
  for i in range(len(y_test)):
      actual_close.append((y_test)[i])
  performance = pd.DataFrame([list(actual_close),list(predicted_close)])
  performance = performance.T
  performance.columns = ['Actual','Predicted']
  performance.index = df.iloc[n_train+n_val+1:,1:].index

  rmse = sqrt(mean_squared_error(performance['Actual'][:len(performance['Predicted'])-1], performance['Predicted'][:len(performance['Predicted'])-1]))
  mape = mean_absolute_percentage_error(performance['Actual'][:len(performance['Predicted'])-1], performance['Predicted'][:len(performance['Predicted'])-1])
  r2 = r2_score(performance['Actual'][:len(performance['Predicted'])-1], performance['Predicted'][:len(performance['Predicted'])-1])*100

  return performance, rmse, r2

#! Load Model_RandomForest
model_file_rf = open('RF_model.pickle', 'rb')
# model_file_rf = open('RF_model.pickle', 'rb')
RF_model = pickle.load(model_file_rf)
#! Load Model_Linear
model_file_lr = open('LR_model.pickle', 'rb')
# model_file_lr = open('LR_model.pickle', 'rb')
LR_model = pickle.load(model_file_lr)
#! Load Model_ANN
model_ANN =  joblib.load('model_ANN.pkl')
#! Load Model_LSTM
model_LSTM =  joblib.load('model_LSTM.pkl')

#? Linear regression
validate_LR, test_LR, eval_train_val_LR, eval_test_LR = Evaluated_model(LR_model,df)
#? Random Forest
validate_RF, test_RF, eval_train_val_RF, eval_test_RF = Evaluated_model(RF_model,df)
#? ANN
test_ANN, mse_test_ANN, score_test_ANN = Evaluated_model_DL(model_ANN,df)
#? LSTM
test_LSTM, mse_test_LSTM, score_test_LSTM = LSTM(model_LSTM, df)


def description_card():
    return html.Div(
        id="description-card",
        children=[
            html.H1("Data Fundamental Programing", style={'textAlign': 'center','color': '#774936',"font-weight": "bold","font-size": "38px",'line-height': '1.2'}),
            html.H3("Predict Commodity Price", style={'textAlign': 'left','color': '#411D13',"font-weight": "bold","font-size": "22px"}),
        ],
    )

def generate_control_card():
    return html.Div(
        children=[
        #! Select Model
        html.P("Select Model :", style={"color":"#6E4230",'text-align': 'left',"font-weight": "bold","font-size": "20px"}),
        dcc.RadioItems(id="slct_mod",
                    options=[
                            {'label': 'Linear Regression', 'value': 'LR_model'},
                            {'label': 'Random Forest', 'value': 'RF_model'},
                            {'label': 'ANN', 'value': 'ANN_model'},
                            {'label': 'LSTM', 'value': 'LSTM_model'},
                            ],
                    value='LR_model',
                    style={"color":"#6E4230",'width': "100%",'display': 'grid',"font-size": "18px"}
                    ),
        #! Select data set
        # html.P("Select Data :", style={'text-align': 'left',"color":"#6E4230","font-weight": "bold","font-size": "20px"}),
        # dcc.RadioItems(id="slct_data",
        #             options=[
        #                     {'label': 'Validate set', 'value': 'val_set'},
        #                     {'label': 'Test set', 'value': 'test_set'},
        #                     ],
        #             value='val_set',
        #             style={'width': "100%",'display': 'grid',"color":"#6E4230","font-size": "18px"}
        #             ),
        ],
    )

app.layout = html.Div(style={'background-color': '#f5ebe0',"height":"900px",'display': 'block','line-height': '1.6','font-size': '90%',"font-family": "open sans,helveticaneue,helvetica neue,Helvetica,Arial,sans-seri"},
    id="app-container",
    children=[
        #! Left column
        html.Div(
            id="left-column",
            style={'margin-top': "5px","padding": "0.6rem","display": "flex","flex-direction": "column",
                    "align-items": "left","width": "300px","height":"900px","float": "left","box-sizing": "border-box", "background":"#d5bdaf"},
            children=[description_card(),generate_control_card()]
        ),
        #! Right column
        html.Div(
            id="right-column",
            style={'display': 'flex', 'flex-direction': 'column','margin-top': "2px","padding": "0.2rem","height": "100vh","align-items": "left","display": "flex","flex-direction": "column"},
            children=[
                html.Div(
                    children=[
                        html.H1("Commodity Price",style={"color":"#774936","margin": "2px","font-size": "36px","font-weight": "bold","text-indent": "0.5em",'line-height': '2','background':'#d6ccc2',"padding": "1rem",'height': '70px'}),
                        html.Hr(),
                        #! Main Graph 1
                        dcc.Graph(id='main_graph1', figure={}, 
                                style={'display': 'flex', 'flex-direction': 'column', "float": "left", "width": "100%","height": "50vh",
                                        'margin-top': "10px",'margin-bottom': "10px", 'background':'#EFE5DC'}),
                                        
                    ],
                ),
                html.Div(children=[
                            html.H2("Model Scoring",style={"color":"#774936","margin": "2px","font-size": "28px","font-weight": "bold","text-indent": "0.8em","line-height": "2",'height': '60px','background':'#e3d5ca',"padding": "0.6rem"}),
                            html.Hr(),
                            #! Accuracy, MSE, Predict
                            html.H3(id='accuracy',style={"color":"#774936","text-indent": "0.8em","font-size": "16px","line-height": "1"}),
                            html.H3(id='rmse',style={"color":"#774936","text-indent": "0.8em","font-size": "16px","line-height": "1"}),
                            html.H3(id='action',style={"color":"#525e75","text-indent": "0.8em",'background':'#fefbe7',"width": "250px","font-size": "20px"}),
                            html.H3(id='recom_today',style={"color":"#774936","text-indent": "0.8em","font-size": "16px","line-height": "1"}),
                            html.H3(id='recom_nextday',style={"color":"#774936","text-indent": "0.8em","font-size": "16px","line-height": "1"}),
                    ],
                ),
            ],
        ),
    ],
)

@app.callback(
    [
    Output(component_id='main_graph1', component_property='figure'),
    Output(component_id='accuracy', component_property='children'),
    Output(component_id='rmse', component_property='children'),
    Output(component_id='action', component_property='children'),
    Output(component_id='recom_today', component_property='children'),
     Output(component_id='recom_nextday', component_property='children'),
    ],
    Input(component_id='slct_mod', component_property='value'),
    )
def update_graph(slct_mod):
    if (slct_mod == 'LR_model'):
        df_plot = test_LR.round(1)
        df_plot.iloc[-1,0] = test_ANN.iloc[-1,0]
        accuracy = eval_test_LR.loc[:,'accuracy test']*100
        rmse = eval_test_LR.loc[:,'RMSE_test']
        today_price = round(test_LR.iloc[-2,0],1)
        next_price = round(test_LR.iloc[-1,1],1)
        actions = ['LONG' if today_price<next_price else 'SHORT']
    if (slct_mod == 'RF_model'):
        df_plot = test_RF.round(1)
        df_plot.iloc[-1,0] = test_ANN.iloc[-1,0]
        accuracy = eval_test_RF.loc[:,'accuracy test']*100
        rmse = eval_test_RF.loc[:,'RMSE_test']
        today_price = round(test_RF.iloc[-2,0],1)
        next_price = round(test_RF.iloc[-1,1],1)
        actions = ['LONG' if today_price<next_price else 'SHORT']
    if (slct_mod == 'ANN_model'):
        df_plot = test_ANN.round(1)
        accuracy = score_test_ANN
        rmse = mse_test_ANN
        today_price = round(test_ANN.iloc[-2,0],1)
        next_price = round(test_ANN.iloc[-1,1],1)
        actions = ['LONG' if today_price<next_price else 'SHORT']
    if (slct_mod == 'LSTM_model'):
        df_plot = test_LSTM.round(1)
        df_plot.iloc[-1,0] = test_ANN.iloc[-1,0]
        accuracy = score_test_LSTM
        rmse = mse_test_LSTM
        today_price = round(test_LSTM.iloc[-2,0],1)
        next_price = round(test_LSTM.iloc[-1,1],1)
        actions = ['LONG' if today_price<next_price else 'SHORT']

    df_plot.columns = ['Actual','Predict']
    fig = px.line(df_plot, x=df_plot.index, y=df_plot.columns, 
                labels={"Price": ["Actual",'Predict'],"value": 'Price'})
    fig.update_traces(mode="lines", 
                        hovertemplate="<br>".join(["Price: %{y}",]))
    fig.update_layout(hovermode="x",legend={"title":"Price"},paper_bgcolor="#f5ebe0",plot_bgcolor='#f5ebe0')

    accuracy = round(float(accuracy),4)
    rmse = round(float(rmse),4)
    accuracy = 'R-Square : ' + str(accuracy)[0:5] + ' %'
    rmse = 'RMSE : ' +  str(rmse)[0:5]
    today_price = round(today_price,1)
    next_price = round(next_price,1)
    action = 'Recommend :' + '   ' + actions[0]
    recommend_today = 'Actual Price (8-Jan-2022) : ' + str(today_price) + ' Dollars'
    recommend_nextday = 'Forecast Price (9-Jan-2022) : ' + str(next_price) + ' Dollars'

    return fig, accuracy, rmse, action, recommend_today, recommend_nextday

if __name__ == '__main__':
  # app.run_server('inline',debug=True,port=8090)
  app.run_server(debug=True)

